syntax = "proto2";

package e2e_noa;

import "lite_common.proto";

// Report current autonomy state.
message AutonomyStateProto {
  optional LiteHeader header = 1;
  enum State {
    option allow_alias = true;

    // Vehicle isn't ready to do anything.
    NOT_READY = 0;

    // Vehicle won't execute control command and is ready to engage.
    READY_TO_AUTO_DRIVE = 2;

    // Vehicle will execute control command and is engaged by the local driver.
    AUTO_DRIVE = 3;

    // Vehicle is triggering issue lead to won't execute control command and
    // need to be take over.
    EMERGENCY_TO_TAKEOVER = 4;

    // Vehicle won't execute control command and is ready to remote dirve.
    READY_TO_REMOTE_DRIVE = 5;

    // Vehicle will execute control command that is sent by the remote driver.
    REMOTE_DRIVE = 6;

    // Vehicle will execute control command and is engaged by the remote driver.
    REMOTE_ASSIST_AUTO_DRIVE = 7;

    // Vehicle is triggering issue and braking immediately.
    EMERGENCY_TO_STOP = 8;

    // Vehicle won't execute speed control command and only execute steer
    // control command.
    AUTO_STEER_ONLY = 10;

    // Vehicle won't execute steer control command and only execute speed
    // control command.
    AUTO_SPEED_ONLY = 11;

    // Vehicle is shutting down.
    SHUTDOWN = 20;

    // Vehicle is initing.
    INIT = 21;

    // Vehicle won't execute steer control command and speed control
    // command,triggered by assist drive system override.
    READY_OVERRIDE = 30;

    // Vehicle is exiting slowly
    SHORT_BRAKE = 31;

    // Deprecated.
    UNKNOWN = 0 [deprecated = true];
    MANUAL = 1 [deprecated = true];
    TAKEOVER = 1 [deprecated = true];
    CRUISE_READY = 2 [deprecated = true];
    AUTO_CRUISE = 3 [deprecated = true];
    STOP = 9 [deprecated = true];
  }
  optional State autonomy_state = 2;

  enum ACCState {
    ACC_NOT_ACTIVE = 0;
    ACC_ACTIVE = 1;
  }
  optional ACCState acc_state = 3;
}

message DriverAction {
  enum LaneChangeCommand {
    LC_CMD_NONE = 1;
    LC_CMD_LEFT = 2;
    LC_CMD_RIGHT = 3;
    LC_CMD_CANCEL = 4;
    LC_CMD_STRAIGHT = 5;  // To fully cover LaneChangeRequestProto::Direction.
  }
}
  